<?xml version="1.0" encoding="UTF-8"?><!--    Copyright (c) 2009, 2011 The University of Memphis.  All rights reserved.     This program and the accompanying materials are made available     under the terms of the LIDA Software Framework Non-Commercial License v1.0     which accompanies this distribution, and is available at    http://ccrg.cs.memphis.edu/assets/papers/2010/LIDA-framework-non-commercial-v1.0.pdf --><lida xmlns="http://ccrg.cs.memphis.edu/LidaXMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"	xsi:schemaLocation="http://ccrg.cs.memphis.edu/LidaXMLSchema LidaXMLSchema.xsd ">    <taskmanager>        <param name="taskManager.tickDuration" type="int">1 </param>        <param name="taskManager.maxNumberOfThreads" type="int"> 100</param>    </taskmanager>    <taskspawners>        <taskspawner name="defaultTS">            <class>edu.memphis.ccrg.lida.framework.tasks.TaskSpawnerImpl</class>        </taskspawner>    </taskspawners>    <submodules>        <module name="Environment">            <class>myagent.modules.PrimingEnvironment</class>            <param name="height" type="int"> 10 </param>            <param name="width" type="int">10 </param>            <param name="environment.ticksPerRun" type="int">1</param>            <param name="blankDuration" type="int">30</param>            <param name="consistent" type="boolean">false</param>            <taskspawner>defaultTS</taskspawner>        </module>        <!-- ****************************************************** -->        <module name="SensoryMemory">            <class>myagent.modules.PrimingSensoryMemory</class>            <associatedmodule>Environment</associatedmodule>            <taskspawner>defaultTS</taskspawner>            <initialTasks>                <task name="backgroundTask">                    <tasktype>SensoryMemoryBackgroundTask</tasktype>                    <ticksperrun>1</ticksperrun>                </task>            </initialTasks>        </module>        <module name="PerceptualAssociativeMemory">            <class>edu.memphis.ccrg.lida.pam.PerceptualAssociativeMemoryImpl</class>            <param name="pam.upscale" type="double">.4 </param>            <param name="pam.downscale" type="double">.6 </param>            <param name="pam.Selectivity" type="double">.5 </param>            <param name="pam.perceptThreshold" type="double">.7 </param>            <param name="pam.excitationTicksPerRun" type="int">1 </param>            <param name="pam.propagationTicksPerRun" type="int">1 </param>            <param name="pam.propagateActivationThreshold" type="double">.05 </param>            <param name="nodes">target:1.0,red,green,topRight,bottomLeft,bottomLeft_red:.05,bottomLeft_green:.05,topRight_red:.05,topRight_green:.05,green_red:.01,red_green:.01</param>            <param name="links">topRight_red:red:0.5,topRight_green:green:0.5,bottomLeft_red:red:0.5,bottomLeft_green:green:0.5,            					topRight_red:topRight:0.5,topRight_green:topRight:0.5,bottomLeft_red:bottomLeft:0.5,bottomLeft_green:bottomLeft:0.5,target:red:0.5,            					topRight_red:green_red,bottomLeft_green:green_red,topRight_green:red_green,bottomLeft_red:red_green            </param>            <taskspawner>defaultTS</taskspawner>            <initialTasks>            	<defaultticksperrun>1</defaultticksperrun>                <task name="TopRightDetector">                    <tasktype>colorDetector</tasktype>                    <param name="nodes">topRight_red,topRight_green,topRight_red:red</param>					<param name="position" type="int">1</param>                </task>                <task name="BottomLeftDetector">                    <tasktype>colorDetector</tasktype>                    <param name="nodes">bottomLeft_red,bottomLeft_green</param>                    <param name="position" type="int">3</param>                </task>				<task name="TargetDetector">                    <tasktype>targetDetector</tasktype>                    <param name="node" type="string">target</param>                </task>           	</initialTasks>            <initializerclass>edu.memphis.ccrg.lida.pam.BasicPamInitializer</initializerclass>        </module>        <module name="Workspace">            <class>edu.memphis.ccrg.lida.workspace.WorkspaceImpl</class>            <submodules>                <module name="PerceptualBuffer">                    <class>edu.memphis.ccrg.lida.workspace.workspacebuffers.WorkspaceBufferImpl</class>                    <taskspawner>defaultTS</taskspawner>                </module>                <module name="CurrentSituationalModel">                    <class>edu.memphis.ccrg.lida.workspace.workspacebuffers.WorkspaceBufferImpl</class>                    <taskspawner>defaultTS</taskspawner>                </module>            </submodules>            <taskspawner>defaultTS</taskspawner>            <initialTasks>                <task name="UpdateCsmBackgroundTask">                    <tasktype>UpdateCsmBackgroundTask</tasktype>                    <ticksperrun>5</ticksperrun>                </task>            </initialTasks>        </module>        <module name="AttentionModule">            <class>edu.memphis.ccrg.lida.attentioncodelets.AttentionCodeletModule</class>            <associatedmodule>Workspace</associatedmodule>            <associatedmodule>GlobalWorkspace</associatedmodule>            <param name="attentionModule.defaultCodeletType" type="string">BasicAttentionCodelet</param>            <param name="attentionModule.codeletActivation" type="double">1.0</param>            <param name="attentionModule.codeletRemovalThreshold" type="double">-1.0</param>            <param name="attentionModule.codeletReinforcement" type="double">0.5</param>            <taskspawner>defaultTS</taskspawner>            <initialTasks>                <task name="TargetCodelet">                    <tasktype>BasicAttentionCodelet</tasktype>                    <ticksperrun>5</ticksperrun>                    <param name="nodes" type="string">red</param>                    <param name="refractoryPeriod" type="int">30</param>                    <param name="initialActivation" type="double">1.0</param>                </task>                <task name="TopRightCodelet">                    <tasktype>BasicAttentionCodelet</tasktype>                    <param name="nodes">topRight_red,topRight,red</param>                    <param name="refractoryPeriod" type="int">30</param>                    <param name="initialActivation" type="double">1.0</param>                </task>                <task name="BottomLeftCodelet">                    <tasktype>BasicAttentionCodelet</tasktype>                    <param name="nodes">bottomLeft_red,bottomLeft,red</param>                    <param name="refractoryPeriod" type="int">30</param>                    <param name="initialActivation" type="double">1.0</param>                </task>                <task name="GREventCodelet">                    <tasktype>BasicAttentionCodelet</tasktype>                    <param name="nodes">green_red,bottomLeft_green,topRight_red,green,red</param>                    <param name="refractoryPeriod" type="int">30</param>                    <param name="initialActivation" type="double">.5</param>                </task>                <task name="RGEventCodelet">                    <tasktype>BasicAttentionCodelet</tasktype>                    <param name="nodes">red_green,bottomLeft_red,topRight_green,green,red</param>                    <param name="refractoryPeriod" type="int">30</param>                    <param name="initialActivation" type="double">.5</param>                </task>		    </initialTasks>        </module>        <module name="StructureBuildingCodeletModule">            <class>edu.memphis.ccrg.lida.workspace.structurebuildingcodelets.StructureBuildingCodeletModule</class>            <associatedmodule>Workspace</associatedmodule>           <taskspawner>defaultTS</taskspawner>        </module>        <module name="GlobalWorkspace">            <class>edu.memphis.ccrg.lida.globalworkspace.GlobalWorkspaceImpl</class>            <param name="globalWorkspace.coalitionRemovalThreshold" type="double">0.0</param>            <param name="globalWorkspace.coalitionDecayStrategy">defaultDecay</param>            <param name="globalWorkspace.refractoryPeriod" type="int">10 </param>            <!-- Trigger parameters -->            <param name="globalWorkspace.delayNoBroadcast" type="int">100 </param>            <param name="globalWorkspace.delayNoNewCoalition" type="int">50 </param>            <param name="globalWorkspace.aggregateActivationThreshold" type="double">2.0</param>            <param name="globalWorkspace.individualActivationThreshold" type="double">0.9</param>            <taskspawner>defaultTS</taskspawner>            <initializerclass>edu.memphis.ccrg.lida.globalworkspace.GlobalWorkspaceInitalizer</initializerclass>        </module>        <module name="ProceduralMemory">            <class>edu.memphis.ccrg.lida.proceduralmemory.ProceduralMemoryImpl</class>            <param name="proceduralMemory.ticksPerStep" type="int"> 14 </param>            <param name="scheme.1">Move topRight   |(topRight_red,topRight,red)()|action.move_topRight|()()|0.01</param>            <param name="scheme.2">Move bottomLeft |(bottomLeft_red,bottomLeft,red)()|action.move_bottomLeft|()()|0.01</param>            <param name="proceduralMemory.schemeSelectionThreshold" type="double">0.5</param>            <param name="proceduralMemory.contextWeight" type="double">1.0</param>            <param name="proceduralMemory.addingListWeight" type="double">1.0</param>            <param name="proceduralMemory.conditionDecayStrategy" type="string">defaultDecay</param>            <param name="proceduralMemory.schemeClass" type="string">edu.memphis.ccrg.lida.proceduralmemory.SchemeImpl</param>            <taskspawner>defaultTS</taskspawner>            <initializerclass>edu.memphis.ccrg.lida.proceduralmemory.BasicProceduralMemoryInitializer</initializerclass>        </module>        <module name="ActionSelection">            <class>edu.memphis.ccrg.lida.actionselection.BasicActionSelection</class>            <param name="actionSelection.ticksPerStep" type="int"> 10</param>            <param name="actionSelection.refractoryPeriodTicks" type="int">80</param>            <param name="actionSelection.candidateThreshold" type="double">0.8</param>            <param name="actionSelection.removalThreshold" type="double">0.1</param>            <param name="actionSelection.backgroundTaskTicksPerRun" type="int">10</param>            <param name="actionSelection.behaviorDecayStrategy" type="string">defaultDecay</param>            <param name="actionSelection.thresholdDecayRate" type="double">0.1</param>            <taskspawner>defaultTS</taskspawner>        </module>        <module name="SensoryMotorSystem">            <class>myagent.modules.PrimingSensoryMotorSystem</class>            <associatedmodule>Environment</associatedmodule>            <param name="smm.mapping.1">action.move_topRight,algorithm.topRight</param>            <param name="smm.mapping.2">action.move_bottomLeft,algorithm.bottomLeft</param>            <param name="smm.processActionTaskTicks" type="int">1</param>            <param name="smm.dorsalStream" type="boolean">true</param>            <taskspawner>defaultTS</taskspawner>            <initializerclass>edu.memphis.ccrg.lida.sensorymotormemory.BasicSensoryMotorMemoryInitializer</initializerclass>        </module>    </submodules>    <listeners>        <listener>            <listenertype>edu.memphis.ccrg.lida.pam.PamListener</listenertype>            <modulename>PerceptualAssociativeMemory</modulename>            <listenername>Workspace</listenername>        </listener>        <!-- ****************************************************** -->        <listener>            <listenertype>edu.memphis.ccrg.lida.globalworkspace.BroadcastListener</listenertype>            <modulename>GlobalWorkspace</modulename>            <listenername>ProceduralMemory</listenername>        </listener>        <listener>            <listenertype>edu.memphis.ccrg.lida.proceduralmemory.ProceduralMemoryListener</listenertype>            <modulename>ProceduralMemory</modulename>            <listenername>ActionSelection</listenername>        </listener>        <listener>            <listenertype>edu.memphis.ccrg.lida.actionselection.ActionSelectionListener</listenertype>            <modulename>ActionSelection</modulename>            <listenername>SensoryMotorSystem</listenername>        </listener>        <listener>            <listenertype>edu.memphis.ccrg.lida.sensorymemory.SensoryMemoryListener</listenertype>            <modulename>SensoryMemory</modulename>            <listenername>SensoryMotorSystem</listenername>        </listener>    </listeners></lida>